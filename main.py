import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.user_keyboards import builder, back
from states.states import CatalogStates, CartStates

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token="7783836620:AAEKekan25gE2N6UOw3_xMWaHDVUSEh_Gc0")
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
last_message_id = None


async def delete_previous_message(chat_id: int):
    global last_message_id
    if last_message_id:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=last_message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        last_message_id = None

async def show_main_menu(message_or_callback, state: FSMContext):
    global last_message_id
    try:
        if isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.answer()
            chat_id = message_or_callback.message.chat.id
            reply_method = message_or_callback.message.answer_photo
        else:
            chat_id = message_or_callback.chat.id
            reply_method = message_or_callback.answer_photo

        await state.clear()
        await delete_previous_message(chat_id)

        caption = (
            "   <b>TECMASTER</b> ‚Äì —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –º–µ—Ö–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏\n\n"
            "üîπ <i>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</i> –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á\n"
            "üîπ <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</i> –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤\n"
            "üîπ <i>–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã</i> –≤ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏ –ø–æ–∫—Ä—ã—Ç–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
        )

        msg = await reply_method(
            photo='AgACAgIAAxkBAANmaFRviIs0dpywgA9Fq9gY9yS6CNsAAgL6MRuMHKBKSVown6eez1wBAAMCAAN5AAM2BA',
            caption=caption,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        last_message_id = msg.message_id

    except Exception as e:
        logger.error(f"Main menu error: {e}")
        error_msg = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        if isinstance(message_or_callback, types.CallbackQuery):
            await message_or_callback.message.answer(error_msg, reply_markup=builder.as_markup())
        else:
            await message_or_callback.answer(error_msg)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    # –°–æ–∑–¥–∞–µ–º fake callback –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ handle_home
    class FakeCallback:
        def __init__(self, message):
            self.message = message
            self.data = "home"
            self.from_user = message.from_user

        async def answer(self):
            pass

    await handle_home(FakeCallback(message), state)


@dp.callback_query(F.data == "home")
async def handle_home(callback: types.CallbackQuery, state: FSMContext):
    global last_message_id
    try:
        await callback.answer()
        await state.clear()
        await delete_previous_message(callback.message.chat.id)

        caption = (
            "   <b>TECMASTER</b> ‚Äì —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–¥–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –º–µ—Ö–∞–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–∫—Ä–∞—Å–∫–∏\n\n"
            "üîπ <i>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è</i> –¥–ª—è –ª—é–±—ã—Ö –∑–∞–¥–∞—á\n"
            "üîπ <i>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</i> –¥–ª—è —á–∞—Å—Ç–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤\n"
            "üîπ <i>–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã</i> –≤ –Ω–∞–Ω–µ—Å–µ–Ω–∏–∏ –ø–æ–∫—Ä—ã—Ç–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:"
        )

        msg = await callback.message.answer_photo(
            photo='AgACAgIAAxkBAANmaFRviIs0dpywgA9Fq9gY9yS6CNsAAgL6MRuMHKBKSVown6eez1wBAAMCAAN5AAM2BA',
            caption=caption,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        last_message_id = msg.message_id

    except Exception as e:
        logger.error(f"Home error: {e}")
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=builder.as_markup()
        )


@dp.callback_query(F.data == "catalog")
async def handle_catalog(callback: types.CallbackQuery, state: FSMContext):
    global last_message_id
    try:
        await callback.answer()
        await state.clear()
        await delete_previous_message(callback.message.chat.id)

        builder = InlineKeyboardBuilder()
        builder.row(
            InlineKeyboardButton(
                text="üîß –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                callback_data="catalog:pro"
            ),
            width=1
        )
        builder.row(
            InlineKeyboardButton(
                text="üè† –ë—ã—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                callback_data="catalog:home"
            ),
            width=1
        )
        builder.row(
            InlineKeyboardButton(
                text="üè≠ –ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
                callback_data="catalog:industrial"
            ),
            width=1
        )
        builder.row(
            InlineKeyboardButton(
                text="üîç –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É",
                switch_inline_query_current_chat=""
            ),
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥",
                callback_data="home"
            )
        )

        msg = await callback.message.answer(
            text="<b>üèó –ö–∞—Ç–∞–ª–æ–≥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è Wagner</b>\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è:",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        last_message_id = msg.message_id

        await state.set_state(CatalogStates.viewing_catalog)

    except Exception as e:
        logger.error(f"Catalog error: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query(F.data == 'catalog:pro')
async def get_pro_catalog(callback: types.CallbackQuery, state: FSMContext):
    global last_message_id
    try:
        await callback.answer()
        await state.clear()
        await delete_previous_message(callback.message.chat.id)

        pro_products = [
            {"id": "pro1", "name": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å–æ—á–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç X500", "price": 125000},
            {"id": "pro2", "name": "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ä–∞—Å–ø—ã–ª–∏—Ç–µ–ª—å W850", "price": 189000},
            {"id": "pro3", "name": "–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è PRO-3000", "price": 235000}
        ]

        builder = InlineKeyboardBuilder()

        for product in pro_products:
            builder.row(
                InlineKeyboardButton(
                    text=f"{product['name']} - {product['price']}‚ÇΩ",
                    callback_data=f"product:{product['id']}"
                ),
                width=1
            )

        builder.row(
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥",
                callback_data="catalog"
            ),
            InlineKeyboardButton(
                text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é",
                callback_data="home"
            ),
            width=2
        )

        msg = await callback.message.answer(
            text="<b>üîß –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</b>\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        last_message_id = msg.message_id

        await state.set_state(CatalogStates.viewing_pro_category)
        await state.update_data(category="pro", products=pro_products)

    except Exception as e:
        logger.error(f"Pro catalog error: {e}", exc_info=True)
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞",
            reply_markup=back.as_markup()
        )


@dp.callback_query(F.data == 'catalog:home')
async def get_catalog_home(callback: types.CallbackQuery, state: FSMContext):
    global last_message_id
    try:
        await callback.answer()
        await state.clear()
        await delete_previous_message(callback.message.chat.id)

        home_products = [
            {"id": "home1", "name": "test1", "price": 125000},
            {"id": "home2", "name": "test2", "price": 189000},
            {"id": "home3", "name": "test3", "price": 235000}
        ]

        builder = InlineKeyboardBuilder()

        for product in home_products:
            builder.row(
                InlineKeyboardButton(
                    text=f"f{product['name']} - {product['price']}",
                    callback_data=f"product:{product['id']}"
                ),
                width=1
            )

        builder.row(
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥",
                callback_data="catalog"
            ),
            InlineKeyboardButton(
                text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é",
                callback_data="home"
            ),
            width=2
        )

        msg = await callback.message.answer(
            text="<b>üîß –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–æ–º–∞</b>\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        last_message_id = msg.message_id

        await state.set_state(CatalogStates.viewing_home_category)
        await state.update_data(category="home", products=home_products)

    except Exception as e:
        logger.error(f"Home catalog error: {e}", exc_info=True)
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞",
            reply_markup=back.as_markup()
        )


@dp.callback_query(F.data == 'catalog:industrial')
async def get_industrial_catalog(callback: types.CallbackQuery, state: FSMContext):
    global last_message_id
    try:
        await callback.answer()
        await state.clear()
        await delete_previous_message(callback.message.chat.id)

        industrial_products = [
            {"id": "pro1", "name": "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–∫—Ä–∞—Å–æ—á–Ω—ã–π –∞–ø–ø–∞—Ä–∞—Ç X500", "price": 125000},
            {"id": "pro2", "name": "–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã–π —Ä–∞—Å–ø—ã–ª–∏—Ç–µ–ª—å W850", "price": 189000},
            {"id": "pro3", "name": "–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è PRO-3000", "price": 235000}
        ]

        builder = InlineKeyboardBuilder()

        for product in industrial_products:
            builder.row(
                InlineKeyboardButton(
                    text=f"{product['name']} - {product['price']}‚ÇΩ",
                    callback_data=f"product:{product['id']}"
                ),
                width=1
            )

        builder.row(
            InlineKeyboardButton(
                text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥",
                callback_data="catalog"
            ),
            InlineKeyboardButton(
                text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é",
                callback_data="home"
            ),
            width=2
        )

        msg = await callback.message.answer(
            text="<b>üîß –ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª—å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ</b>\n\n"
                 "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        last_message_id = msg.message_id

        await state.set_state(CatalogStates.viewing_industrial_category)
        await state.update_data(category="industrial", products=industrial_products)

    except Exception as e:
        logger.error(f"Pro catalog error: {e}", exc_info=True)
        await callback.message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞",
            reply_markup=back.as_markup()
        )


@dp.callback_query(F.data == "about")
async def handle_about(callback: types.CallbackQuery, state: FSMContext):
    global last_message_id
    try:
        await callback.answer()
        await state.clear()
        await delete_previous_message(callback.message.chat.id)

        about_text = (
            "–ö—Ç–æ –º—ã?\n\n"
            "–í –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ "
            "–∏ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –Ω–∞–Ω–µ—Å–µ–Ω–∏—è –∂–∏–¥–∫–∏—Ö –ø–æ–∫—Ä—ã—Ç–∏–π, –ø–æ—Ä–æ—à–∫–æ–≤—ã—Ö –ø–æ–∫—Ä—ã—Ç–∏–π –∏ –∫—Ä–∞—Å–æ–∫ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏. "
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –Ω–∞—à–∏ –Ω–∞–¥–µ–∂–Ω—ã–µ –∏ –≤—ã—Å–æ–∫–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞–ø–ø–∞—Ä–∞—Ç—ã, –æ—Å–Ω–∞—â–µ–Ω–Ω—ã–µ —Å–∞–º—ã–º–∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏.\n\n"
            "–î–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –∏ –º–∞—Å—Ç–µ—Ä–æ–≤ –∫–æ–º–ø–∞–Ω–∏—è Wagner –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —à–∏—Ä–æ–∫–∏–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —É–¥–æ–±–Ω–æ–π –∏ –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π "
            "–ø—Ä–æ–¥—É–∫—Ü–∏–∏ –±—ã—Ç–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ª—é–±—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤.\n\n"
            "–ú—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π. –ë–ª–∞–≥–æ–¥–∞—Ä—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º –∏ "
            "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Ä–µ—à–µ–Ω–∏—è–º, –Ω–∞—à–∞ –ø—Ä–æ–¥—É–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –ø–æ –Ω–∞—Å—Ç–æ—è—â–µ–º—É –ø–æ–ª–µ–∑–Ω–æ–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤."
        )

        msg = await callback.message.answer(
            text=about_text,
            reply_markup=back.as_markup(),
            parse_mode="HTML"
        )
        last_message_id = msg.message_id

    except Exception as e:
        logger.error(f"About error: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.callback_query(F.data == "cart")
async def handle_cart(callback: types.CallbackQuery, state: FSMContext):
    global last_message_id
    try:
        await callback.answer()
        await state.clear()
        await delete_previous_message(callback.message.chat.id)

        msg = await callback.message.answer(
            text="üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n"
                 "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            reply_markup=back.as_markup(),
            parse_mode="HTML"
        )
        last_message_id = msg.message_id

        await state.set_state(CartStates.viewing_cart)

    except Exception as e:
        logger.error(f"Cart error: {e}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(F.photo)
async def handle_photo(message: types.Message):
    try:
        file_id = message.photo[-1].file_id
        await message.answer(
            f"üñº <b>–§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n"
            f"üîë <code>{file_id}</code> ‚Äî —Ç–≤–æ–π file_id\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏!",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Photo error: {e}")
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())